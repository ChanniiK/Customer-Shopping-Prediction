# -*- coding: utf-8 -*-
"""Final project_customer shopping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kj_OryjlRF2J19pPvURHK2GXwTvRnOR2
"""

#import
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data = pd.read_csv('customer_shopping_data.csv')
print(data)

#Prepare data
#column category, payment_method, gender
data = data.drop(['invoice_no', 'customer_id', 'invoice_date'], axis = 1)
data['category'] = data['category'].replace({'Clothing' : 1, 'Shoes' : 2, 'Books': 3, 'Cosmetics' : 4, 'Food & Beverage' : 5, 'Toys' : 6, 'Technology' : 7, 'Souvenir' : 8})
data['payment_method'] = data['payment_method'].replace({'Credit Card' : 1, 'Debit Card' : 2, 'Cash' : 3})
data['gender'] = data['gender'].replace({'Male' : 1, 'Female' : 2})

#Encode column shopping_mall to number
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
data['shopping_mall'] = le.fit_transform(data['shopping_mall'])
data['price'] = data['price'].astype(int)
print(data)

#Predict price (Knn)
X = data[['gender', 'age', 'category', 'quantity', 'payment_method', 'shopping_mall']]
Y = data['price']
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X = scaler.fit_transform(X)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 20)

from sklearn.neighbors import KNeighborsClassifier
knn_model = KNeighborsClassifier()
knn_model.fit(X_train,y_train)

from sklearn.model_selection import GridSearchCV
parameters = {'n_neighbors' : range (1,11),
              'weights': ['uniform', 'distance'],
              'algorithm' : ['ball_tree', 'kd_tree', 'brute', 'auto']}
clf = GridSearchCV(knn_model, parameters, scoring = 'accuracy')
clf.fit(X_train, y_train)
print("Tuned Hyperparameters of KNN model :", clf.best_params_)
print("KNN model Accuracy :",clf.best_score_)

from sklearn.neighbors import KNeighborsClassifier
knn_model = KNeighborsClassifier()
knn_model.fit(X_train,y_train)

from sklearn.metrics import accuracy_score
y_pred_train = knn_model.predict(X_train)
y_pred_test = knn_model.predict(X_test)
print("Train data accuracy:",accuracy_score(y_train, y_pred_train))
print("Test data accuracy:",accuracy_score(y_test, y_pred_test))

from sklearn import metrics
print(metrics.classification_report(y_pred_test, y_test))

#Predict payment_method (Knn)
X = data[['gender', 'age', 'category', 'quantity', 'price', 'shopping_mall']]
Y = data['payment_method']
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X = scaler.fit_transform(X)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 20)

from sklearn.model_selection import GridSearchCV
parameters = {'n_neighbors' : range (1,11),
              'weights': ['uniform', 'distance'],
              'algorithm' : ['ball_tree', 'kd_tree', 'brute', 'auto']}
clf = GridSearchCV(knn_model, parameters, scoring = 'accuracy')
clf.fit(X_train, y_train)
print("Tuned Hyperparameters of KNN model :", clf.best_params_)
print("KNN model Accuracy :",clf.best_score_)


from sklearn.neighbors import KNeighborsClassifier
knn_model = KNeighborsClassifier()
knn_model.fit(X_train,y_train)

from sklearn.metrics import accuracy_score
y_pred_train = knn_model.predict(X_train)
y_pred_test = knn_model.predict(X_test)
print("Train data accuracy:",accuracy_score(y_train, y_pred_train))
print("Test data accuracy:",accuracy_score(y_test, y_pred_test))

from sklearn import metrics
print(metrics.classification_report(y_pred_test, y_test))

#Predict price (linear)
X = data[['gender', 'age', 'category', 'quantity', 'payment_method', 'shopping_mall']]
Y = data['price']
X = scaler.fit_transform(X)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=4)

from sklearn.linear_model import LinearRegression
LinReg_model = LinearRegression()
LinReg_model.fit(X_train, y_train)
print(f"\nScore Model 2 {LinReg_model.score(X,Y)}")
print(LinReg_model.intercept_)
print(f"coefficient 2: {LinReg_model.coef_}")

from sklearn.metrics import mean_squared_error
y_pre = LinReg_model.predict(X_test)
print("R-squared 2:", LinReg_model.score(X_test,y_test))
print("Mean squared error 2: %.7f" % mean_squared_error( y_test, y_pre))

#Predict payment_method (linear)
X = data[['gender', 'age', 'category', 'quantity', 'price', 'shopping_mall']]
Y = data['payment_method']

X = scaler.fit_transform(X)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=4)

from sklearn.linear_model import LinearRegression
LinReg_model = LinearRegression()
LinReg_model.fit(X_train, y_train)
print(f"\nScore Model 2 {LinReg_model.score(X,Y)}")
print(LinReg_model.intercept_)
print(f"coefficient 2: {LinReg_model.coef_}")

from sklearn.metrics import mean_squared_error
y_pre = LinReg_model.predict(X_test)
print("R-squared 2:", LinReg_model.score(X_test,y_test))
print("Mean squared error 2: %.7f" % mean_squared_error( y_test, y_pre))

#Predict price (logistic)
X = data[['gender', 'age', 'category', 'quantity', 'payment_method', 'shopping_mall']]
Y = data['price']
X = scaler.fit_transform(X)

from sklearn.linear_model import LogisticRegression
lr_model = LogisticRegression()
lr_model.fit(X_train,y_train)

from sklearn.metrics import accuracy_score
y_pred_train = lr_model.predict(X_train)
y_pred_test = lr_model.predict(X_test)
logis_accu_test = accuracy_score(y_test, y_pred_test)
logis_accu_train = accuracy_score(y_train, y_pred_train)

print(f"Train data accuracy: {logis_accu_train}")
print(f"Test data accuracy: {logis_accu_test}")

from sklearn import metrics
print(metrics.classification_report(y_pred_test, y_test))

from sklearn.metrics import classification_report
from sklearn.metrics import precision_recall_fscore_support
weighted_avg_logis = precision_recall_fscore_support(y_pred_test, y_test, average='weighted')
print('Weighted Avg. Precision:', weighted_avg_logis[0])
print('Weighted Avg. Recall:', weighted_avg_logis[1])
print('Weighted Avg. F1-score:', weighted_avg_logis[2])

from yellowbrick.classifier import ROCAUC
model = LogisticRegression()
visualizer = ROCAUC(model, micro=False, macro=False)
visualizer.fit(X_train, y_train)
visualizer.score(X_test, y_test)
visualizer.show()

#Predict payment_method (logistic)
X = data[['gender', 'age', 'category', 'quantity', 'price', 'shopping_mall']]
Y = data['payment_method']

X = scaler.fit_transform(X)

from sklearn.linear_model import LogisticRegression
lr_model = LogisticRegression()
lr_model.fit(X_train,y_train)

from sklearn.metrics import accuracy_score
y_pred_train = lr_model.predict(X_train)
y_pred_test = lr_model.predict(X_test)
logis_accu_test = accuracy_score(y_test, y_pred_test)
logis_accu_train = accuracy_score(y_train, y_pred_train)

print(f"Train data accuracy: {logis_accu_train}")
print(f"Test data accuracy: {logis_accu_test}")

from sklearn import metrics
print(metrics.classification_report(y_pred_test, y_test))

from sklearn.metrics import classification_report
from sklearn.metrics import precision_recall_fscore_support
weighted_avg_logis = precision_recall_fscore_support(y_pred_test, y_test, average='weighted')
print('Weighted Avg. Precision:', weighted_avg_logis[0])
print('Weighted Avg. Recall:', weighted_avg_logis[1])
print('Weighted Avg. F1-score:', weighted_avg_logis[2])

from yellowbrick.classifier import ROCAUC
model = LogisticRegression()
visualizer = ROCAUC(model, micro=False, macro=False)
visualizer.fit(X_train, y_train)
visualizer.score(X_test, y_test)
visualizer.show()

#Predict price (Decision tree)
features = ['gender', 'age', 'category', 'quantity', 'payment_method','shopping_mall']
X = data[features].values
Y = data['price'].values

#data ไม่ normolize
from sklearn.model_selection import train_test_split
X_train_1, X_test_1, y_train_1, y_test_1 = train_test_split(X, Y, test_size = 0.2, random_state = 20)

#train Decision tree model
from sklearn.tree import DecisionTreeClassifier
tree_model = DecisionTreeClassifier()
tree_model.fit(X_train_1,y_train_1)

from sklearn.model_selection import GridSearchCV
parameters = {
    'max_depth' : range (1,101),
    'criterion'  : ['entropy', 'gini'],
}
clf = GridSearchCV(tree_model, parameters, scoring = 'accuracy')
clf.fit(X_train_1, y_train_1)

print("Tuned Hyperparameters of Dicision tree model :", clf.best_params_)
print("Dicision tree model Accuracy :",clf.best_score_)

#tree model ค่า accuracy
from sklearn.metrics import accuracy_score
y_pred_train_3 = tree_model.predict(X_train_1)
y_pred_test_3 = tree_model.predict(X_test_1)
print("Train model Decision tree data accuracy:",accuracy_score(y_train_1, y_pred_train_3))
print("Test model Decision tree data accuracy:",accuracy_score(y_test_1, y_pred_test_3))

#classification report
from sklearn import metrics
print(metrics.classification_report(y_pred_test_3, y_test_1))

from sklearn.metrics import precision_recall_fscore_support
weighted_avg_tree = precision_recall_fscore_support(y_pred_test_3, y_test_1, average = 'weighted')
print('Weighted Avg. Precision tree model :', weighted_avg_tree[0])
print('Weighted Avg. Recall tree model :', weighted_avg_tree[1])
print('Weighted Avg. F1-score tree model :', weighted_avg_tree[2])

#plot graph ROC curve
from yellowbrick.classifier import ROCAUC
visualizer_tree = ROCAUC(tree_model, micro = False, macro = False)
visualizer_tree.fit(X_train_1, y_train_1)
visualizer_tree.score(X_test_1, y_test_1)
visualizer_tree.show()

#Predict payment_method (Decision tree)
features = ['gender', 'age', 'category', 'quantity', 'price','shopping_mall']
X = data[features].values
Y = data['payment_method'].values

#data ไม่ normolize
from sklearn.model_selection import train_test_split
X_train_1, X_test_1, y_train_1, y_test_1 = train_test_split(X, Y, test_size = 0.2, random_state = 20)

#train Decision tree model
from sklearn.tree import DecisionTreeClassifier
tree_model = DecisionTreeClassifier()
tree_model.fit(X_train_1,y_train_1)

from sklearn.model_selection import GridSearchCV
parameters = {
    'max_depth' : range (1,101),
    'criterion'  : ['entropy', 'gini'],
}
clf = GridSearchCV(tree_model, parameters, scoring = 'accuracy')
clf.fit(X_train_1, y_train_1)

print("Tuned Hyperparameters of Dicision tree model :", clf.best_params_)
print("Dicision tree model Accuracy :",clf.best_score_)

#tree model ค่า accuracy
from sklearn.metrics import accuracy_score
y_pred_train_3 = tree_model.predict(X_train_1)
y_pred_test_3 = tree_model.predict(X_test_1)
print("Train model Decision tree data accuracy:",accuracy_score(y_train_1, y_pred_train_3))
print("Test model Decision tree data accuracy:",accuracy_score(y_test_1, y_pred_test_3))

#classification report
from sklearn import metrics
print(metrics.classification_report(y_pred_test_3, y_test_1))

from sklearn.metrics import precision_recall_fscore_support
weighted_avg_tree = precision_recall_fscore_support(y_pred_test_3, y_test_1, average = 'weighted')
print('Weighted Avg. Precision tree model :', weighted_avg_tree[0])
print('Weighted Avg. Recall tree model :', weighted_avg_tree[1])
print('Weighted Avg. F1-score tree model :', weighted_avg_tree[2])

#plot graph ROC curve
from yellowbrick.classifier import ROCAUC
visualizer_tree = ROCAUC(tree_model, micro = False, macro = False)
visualizer_tree.fit(X_train_1, y_train_1)
visualizer_tree.score(X_test_1, y_test_1)
visualizer_tree.show()

#Predict price (Gaussian Naïve Bayes)
features = ['gender', 'age', 'category', 'quantity', 'payment_method','shopping_mall']
X = data[features].values
Y = data['price'].values

#data ไม่ normolize
from sklearn.model_selection import train_test_split
X_train_1, X_test_1, y_train_1, y_test_1 = train_test_split(X, Y, test_size = 0.2, random_state = 20)

#train Decision naive bayes model
from sklearn.naive_bayes import GaussianNB
Gnb_model = GaussianNB()
Gnb_model.fit(X_train_1,y_train_1)
print(Gnb_model.score(X_train_1,y_train_1))

#naive bayes model ค่า accuracy
from sklearn.metrics import accuracy_score
y_pred_train_3 = Gnb_model.predict(X_train_1)
y_pred_test_3 = Gnb_model.predict(X_test_1)
print("Train model naive data accuracy:",accuracy_score(y_train_1, y_pred_train_3))
print("Test model naive data accuracy:",accuracy_score(y_test_1, y_pred_test_3))

#classification report
from sklearn import metrics
print(metrics.classification_report(y_pred_test_3, y_test_1))

from sklearn.metrics import precision_recall_fscore_support
weighted_avg_tree = precision_recall_fscore_support(y_pred_test_3, y_test_1, average = 'weighted')
print('Weighted Avg. Precision naive model :', weighted_avg_tree[0])
print('Weighted Avg. Recall naive model :', weighted_avg_tree[1])
print('Weighted Avg. F1-score naive model :', weighted_avg_tree[2])

#plot graph ROC curve
from yellowbrick.classifier import ROCAUC
visualizer_tree = ROCAUC(Gnb_model, micro = False, macro = False)
visualizer_tree.fit(X_train_1, y_train_1)
visualizer_tree.score(X_test_1, y_test_1)
visualizer_tree.show()

#Predict payment_method (Gaussian Naïve Bayes)
features = ['gender', 'age', 'category', 'quantity', 'price','shopping_mall']
X = data[features].values
Y = data['payment_method'].values

#data ไม่ normolize
from sklearn.model_selection import train_test_split
X_train_1, X_test_1, y_train_1, y_test_1 = train_test_split(X, Y, test_size = 0.2, random_state = 20)

#train Decision naive bayes model
from sklearn.naive_bayes import GaussianNB
Gnb_model = GaussianNB()
Gnb_model.fit(X_train_1,y_train_1)
print(Gnb_model.score(X_train_1,y_train_1))

#naive bayes model ค่า accuracy
from sklearn.metrics import accuracy_score
y_pred_train_3 = Gnb_model.predict(X_train_1)
y_pred_test_3 = Gnb_model.predict(X_test_1)
print("Train model naive data accuracy:",accuracy_score(y_train_1, y_pred_train_3))
print("Test model naive data accuracy:",accuracy_score(y_test_1, y_pred_test_3))

#classification report
from sklearn import metrics
print(metrics.classification_report(y_pred_test_3, y_test_1))

from sklearn.metrics import precision_recall_fscore_support
weighted_avg_tree = precision_recall_fscore_support(y_pred_test_3, y_test_1, average = 'weighted')
print('Weighted Avg. Precision naive model :', weighted_avg_tree[0])
print('Weighted Avg. Recall naive model :', weighted_avg_tree[1])
print('Weighted Avg. F1-score naive model :', weighted_avg_tree[2])

#plot graph ROC curve
from yellowbrick.classifier import ROCAUC
visualizer_tree = ROCAUC(Gnb_model, micro = False, macro = False)
visualizer_tree.fit(X_train_1, y_train_1)
visualizer_tree.score(X_test_1, y_test_1)
visualizer_tree.show()

#Deploy model
new_data = pd.read_excel('Test model.xlsx')
print(new_data)

#Predict price (Decision tree)
features = ['gender', 'age', 'category', 'quantity', 'payment_method','shopping_mall']
X_new = new_data[features].values
Y_new = new_data['price'].values

from sklearn.tree import DecisionTreeClassifier
tree_model = DecisionTreeClassifier()
tree_model.fit(X_new,Y_new)

y_pred_new = tree_model.predict(X_new)

from sklearn.metrics import accuracy_score, classification_report, precision_recall_fscore_support
accuracy = accuracy_score(Y_new, y_pred_new)
report = classification_report(Y_new, y_pred_new)
weighted_avg = precision_recall_fscore_support(Y_new, y_pred_new, average='weighted')

print('Test data accuracy:', accuracy)
print('Classification Report:\n', report)
print('Weighted Avg. Precision:', weighted_avg[0])
print('Weighted Avg. Recall:', weighted_avg[1])
print('Weighted Avg. F1-score:', weighted_avg[2])

#Predict payment_method (logistic)
X = new_data[['gender', 'age', 'category', 'quantity', 'price', 'shopping_mall']]
Y = new_data['payment_method']

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X = scaler.fit_transform(X)

from sklearn.metrics import accuracy_score
y_pred_test = lr_model.predict(X)
logis_accu_test = accuracy_score(Y, y_pred_test)

print(f"Test data accuracy: {logis_accu_test}")

from sklearn import metrics
print(metrics.classification_report(y_pred_test, Y))

from sklearn.metrics import classification_report
from sklearn.metrics import precision_recall_fscore_support
weighted_avg_logis = precision_recall_fscore_support(y_pred_test, Y, average='weighted')
print('Weighted Avg. Precision:', weighted_avg_logis[0])
print('Weighted Avg. Recall:', weighted_avg_logis[1])
print('Weighted Avg. F1-score:', weighted_avg_logis[2])